View(gdp_data1)
colnames(gdp_data1)[1]<- "CountryCode"
View(gdp_data1)
gdp_data1 <- select(gdp_data1, 1:2)
View(gdp_data1)
merged<- merge(gpd_data1, ed_stat, by="CountryCode")
merged<- merge(gdp_data1, ed_stat, by="CountryCode")
merged<- merge(gdp_data1, ed_stats, by="CountryCode")
View(merged)
View(ed_stats)
ed_stats <- filter(ed_stats, 25:234)
ed_stats <- filter(ed_stats[25:234,])
View(ed_stats)
merged<- merge(gdp_data1, ed_stats, by="CountryCode")
View(merged)
View(gdp_data1)
gpd_data1 <- filter(gdp_data1[5:194,])
View(gpd_data1)
gdp_data1 <- filter(gdp_data1[5:194,])
rm(gpd_data1)
merged<- merge(gdp_data1, ed_stats, by="CountryCode")
View(merged)
colnames(gdp_data1)[2] <- "rank"
View(gdp_data1)
View(gdp_data1)
View(ed_stats)
View(merged)
merged<- merge(gdp_data1, ed_stats, by="CountryCode")
View(merged)
class(merged[2])
merged[2] <- as.numeric(as.data.frame(merged[2]))
merged_2 <- arranged(merged, desc(rank))
merged_2 <- arrange(merged, desc(rank))
View(merged_2)
rm(merged_2)
View(merged)
merged[[2]]
class(merged[[2]])
merged2 <- as.matrix(merged)
merged2
class(merged2[2])
merged2[2] <- as.numeric(as.character(merged2[2]))
merged2[,2] <- as.numeric(as.character(merged2[,2]))
merged2[,2]
class(merged[,2])
class(merged2[,2])
merged[,2] <- as.numeric(as.data.frame(merged[,2]))
class(merged[,2])
class(merged)
merged[,2] <- as.numeric(as.character(merged[,2]))
class(merged[,2])
arrange(merged, desc(rank))
merged_1 <-arrange(merged, desc(rank))
View(merged_1)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
getwd()
setwd(/Users/samuelcolon/Coursera/R_Programming/p_assign1)
setwd("/Users/samuelcolon/Coursera/R_Programming/p_assign1")
getwd()
ls
submit()
submit()
submit()
submit()
submit()
submit()
setwd()
getwd()
ls
ls()
#Quiz 4, "GETTING AND CLEANING DATA"
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile="/Users/samuelcolon/Coursera/Getting_and_Cleaning_Data/Quiz_4/idaho.csv", method = "curl")
read.csv(."/idaho.csv")
read.csv(./"idaho.csv")
getwd()
setwd("/Users/samuelcolon//Coursera/Getting_and_Cleaning_Data//Quiz_4")
getwd)
getwd()
read.csv(./"idaho.csv")
read.csv("idaho.csv")
idaho_data <- read.csv("idaho.csv")
?strsplit()
head(idaho_data)
splitNames <- strsplit(names(idaho_data), "wgpt")
splitsnames[[123]]
splitNames[[123]]
splitNames <- strsplit(names(idaho_data), "wgtp")
splitNames[[123]]
read.csv("url2")
url2= "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
read.csv("url2")
url2= "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url2
read.csv("url2")
url2= "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(url, destfile="/Users/samuelcolon/Coursera/Getting_and_Cleaning_Data/Quiz_4/gdp.csv", method = "curl")
gdp_data <-read.csv("gdp.csv")
head(gdp_data)
url2= "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(url2, destfile="/Users/samuelcolon/Coursera/Getting_and_Cleaning_Data/Quiz_4/gdp.csv", method = "curl")
gdp_data <-read.csv("gdp.csv")
head(gdp_data)
url2= "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(url2, destfile="/Users/samuelcolon/Coursera/Getting_and_Cleaning_Data/Quiz_4/gdp.csv", method = "curl")
gdp_data <-read.csv("gdp.csv")
gdp_data
names(gdp_data)
gdp_data$Gross.domestic.product.2012
head(gdp_data)
gdp_data$X.3
gdp_data[,3]
gdp_data[,4]
gdp_data[,2]
gdp_data[,5]
colnames(gdp_data)[5] <- "money"
names(gdp_data)
gdp_data$money
amount <- gdp_data$money
head(amount)
View(gdp_data)
gdp_data <-read.csv("gdp.csv")
View(gdp_data)
colnames(gdp_data)[5] <- "money"
View(gdp_data)
gdp_data <- select(gdp_data, c("X", "money"))
gdp_data <- select(gdp_data, "X", "money")
gdp_data <- select(gdp_data, c(1,5))
View(gdp_data)
gdp_data <- filter(gdp_data, 5:194)
gdp_data <- filter(gdp_data, [5:194,])
gdp_data <- filter(gdp_data[5:194,])
View(gdp_data)
mean(gdp_data$money)
gdp_data <- as.numeric(as.factor(gpd_data[,2]))
gdp_data <- as.numeric(as.factor(gdp_data[,2]))
mean(gpd_data[,2]
)
mean(gdp_data[,2])
mean(gdp_data[2])
gdp_data[,2]
class(gdp_data[,2])
class(gdp_data)
gdp_data
head(gdp_data)
gdp_data <-read.csv("gdp.csv")
amount <- gdp_data$money
gdp_data <- select(gdp_data, c(1,5))
gdp_data <- filter(gdp_data[5:194,])
head(gdp_data)
head(gdp_data[,2])
head(as.numeric(as.factor(gdp_data[,2]))
)
head(as.numeric(as.character(gdp_data[,2]))
)
test<- head(as.numeric(as.factor(gdp_data[,2]))
)
head(as.numeric(as.character(test)))
which(head(as.numeric(as.character(test))))
which(test)
test<- as.matrix(gdp_data)
class(gdp_data[,2])
class(gdp_data[,1])
class(test)
class(test[,2])
test_num <- as.numeric(as.character(test[,2]))
head(test[,2])
class(test[,2])
as.numeric(as.character(test[,2]))
test
gdp_data <-read.csv("gdp.csv", stringAsFactors="FALSE")
?read.csv
gdp_data <-read.csv("gdp.csv", stringAsFactors=FALSE)
gdp_data <-read.csv("gdp.csv", stringsAsFactors=FALSE)
gdp_data <- select(gdp_data, c(1,5))
gdp_data <- filter(gdp_data[5:194,])
class(gdp_data[,2])
test <- as.numeric(as.character(gdp_data[,2]))
gdp_data[,2]
class(gdp_data)
dim(gdp_data)
head(gdp_data[,2])
as.numeric("400")
View(gdp_data)
as.numeric("  400")
as.numeric("  400  ")
gpd_data[1,3]
gpd_data[1,2
]
gdp_data[1,2]
as.numeric(gdp_data[1,2])
as.numeric(" 16, 244, 600")
no_commas <- sub("," "", gdp_data$X.3)
no_commas <- sub("\\," "", gdp_data$X.3)
no_commas <- sub(",""", gdp_data$X.3)
no_commas <- sub(",""", gdp_data[,2])
no_commas <- sub("4","", gdp_data$X.3)
no_commas <- sub(",","", gdp_data$X.3)
head(no_commas)
no_commas<- sub(",","",no_commas)
no_commas
mean(as.numeric(no_commas))
gdp_data <-read.csv("gdp.csv", stringsAsFactors=FALSE)
View(gdp_data)
colnames(gdp_data)[3] <- "countryNames"
View(gdp_data)
estfile="/Users/samuelcolon/Coursera/Getting_and_Cleaning_Data/ed_stats.csv", method = "curl")
gdp_data <-read.csv("gdp.csv", stringsAsFactors=FALSE)
View(gdp_data)
colnames(gdp_data)[4] <- "countryNames"
gdp_data<- select(gdp_data[,4])
gdp_data<- select(gdp_data, 4)
View(gdp_data)
gdp_data<- filter(gdp_data, 5:194)
gdp_data<- filter(gdp_data[5:194,])
gdp_data<- filter(gdp_data[5:194])
gdp_data<- filter(gdp_data[5:194],)
gdp_data<- filter(gdp_data[5:194])
gdp_data<- filter(gdp_data[5:194,])
gdp_data <-read.csv("gdp.csv", stringsAsFactors=FALSE)
gdp_data<- filter(gdp_data[5:194,])
gdp_data<- select(gdp_data, 4)
View(gdp_data)
colnames(gpd_data)[1] <- "countryNames"
colnames(gdp_data)[1] <- "countryNames"
View(gdp_data)
grep("^United", countryNames)
grep("^United", gdp_data$countryNames)
grep("United$", gdp_data$countryNames)
grep("*United", gdp_data$countryNames)
gdp_data <-read.csv("gdp.csv", stringsAsFactors=FALSE)
url3= "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv "
download.file(url3, destfile="/Users/samuelcolon/Coursera/Getting_and_Cleaning_Data/Quiz_4/country.csv", method = "curl")
country_data <-read.csv("country.csv", stringsAsFactors=FALSE)
head(country_data)
View(country_data)
country_data1 <- select(country_data, c(1,2,10))
View(country_data1)
View(gdp_data)
colnames(gdp_data)[1] <-"countryCode"
View(gdp_data)
View(country_data1)
colnames(country_data)[1] <-"countryCode"
View(country_data1)
View(country_data1)
View(country_data1)
View(country_data1)
View(gdp_data)
View(gdp_data)
View(country_data1)
View(gdp_data)
View(country_data)
colnames(country_data1)[1] <-"countryCode"
View(country_data1)
merged_data <- merge(gdp_data, country_data1, by= "countryCode")
View(merged_data)
View(gdp_data)
gdp_data<- select(gdp_data, c(1,2))
gdp_data<- filter(gdp_data[5:194,])
View(gdp_data)
merged_data <- merge(gdp_data, country_data1, by= "countryCode")
View(merged_data)
grep("June", merged_data$Special.Notes)
merged_data[16,4]
merged_data[16,29]
merged_data[29,4]
merged_data[51,4]
merged_data[65,4]
merged_data[89,4]
merged_data[95,4]
merged_data[96,4]
merged_data[117,4]
merged_data[133,4]
grep("Fiscal year end: June 30", merged_data$Special.Notes)
library(quantmod)
library("quantmod")
install.packages("quantmod")
library("quantmod")
amzn = getSymbols("AMZN", auto.assign=FALSE)
sampleTimes= index(amzn)
View(amzn)
grep("2012", amzn$row.names)
grep("2012", amzn[,1])
class(amzn)
View(amzn)
?xts
amzn(,1)
amzn[,1]
?which
amzn["2007-01-23"]
amzn["2012-01-01"]
amzn["2012-01-03"]
amzn["2012-01-01:2013-01-01"]
amzn["2012-01-01/2013-01-01"]
count(amzn["2012-01-01/2013-01-01"])
getSymbols("SPY")
amzn[.indexwday(amzn)==1]
amzn[.indexwday(amzn)==7]
amzn[.indexwday(amzn)==1]
amzn[.indexwday(amzn)==0]
count(amzn[.indexwday(amzn)==0])
amzn[.indexwday(amzn)==0])
amzn[.indexwday(amzn)==0]
amzn[.indexwday(amzn[2012])==0]
amzn_2012 <- amzn["2012-01-01/2013-01-01"]
amzn_2012[.indexwday(amzn)==0]
amzn_2012[.indexwday(amzn)==1]
amzn_2012
amzn_2012[.indexwday(amzn_2012)==0]
count(amzn_2012[.indexwday(amzn_2012)==0])
swirl()
library("swirl")
swirl()
View(student_info)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
studenst2
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col= sex_class, into = c("sex", "class"))
submit()
submit()
submit()
submit()
reset()
submit()
submit()
students3
?gather
submit()
spread()
?spread
submit()
submit()
library(dplyr)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
library(dplyr)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
students3
submit()
extract_numeric("class5")
submit()
?mutate
submit()
submit()
?extract_numeric
submit()
submit()
?mutate
submit()
submit()
reset()
submit()
?extract_numeric
submit()
submit()
?mutate
submit()
submit()
students3$class
students3
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
)
students3
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
submit()
View(students3)
head(students3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
submit()
))
""""
submit()
passed
failed
mutate(passed, status, passed)
reset()
submit()
reset()
reset()
reset()
reset()
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
?separate
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1//9//2012")
ymd("1--9--2012")
ymd("1-9-2012")
ymd("2012-1-9")
ymd("2012-1-09")
ymd("2012-01-9")
ymd("1920-01-2")
ymd("1920-01-02")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:33:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours = 7, minutes = 48, seconds = 0)
this_moment
nyc <-now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
nyc + hours(15) +minutes(50)
arrive <- nyc + hours(15) +minutes(50)
arrive <- depart + hours(15) +minutes(50)
?with_tz()
?with_tz
arrive <- with_tz(arrive, tzone= "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long(last_time, arrive)
how_long <- (last_time, arrive)
how_long <- (last_time, arrive)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
